<style>
  #sqft-input-{{ section.id }}::-webkit-outer-spin-button,
  #sqft-input-{{ section.id }}::-webkit-inner-spin-button,
  #boxes-output-{{ section.id }}::-webkit-outer-spin-button,
  #boxes-output-{{ section.id }}::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }
</style>

<div class="sqft-calculator" style="margin: 20px 0; padding: 20px; border: 1px solid #e0e0e0; border-radius: 8px;">
  <h3 style="margin-bottom: 16px; font-size: 1.2rem;">QUANTITY</h3>
  <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 16px; margin-bottom: 12px;">
    <div>
      <div style="position: relative;">
        <input
          type="number"
          id="sqft-input-{{ section.id }}"
          min="1"
          step="1"
          placeholder="Square Feet"
          style="width: 100%; padding: 10px 60px 10px 10px; border: 1px solid #ccc; border-radius: 4px; font-size: 1rem; -moz-appearance: textfield;"
        />
        <span id="sqft-unit-{{ section.id }}" style="position: absolute; right: 12px; top: 50%; transform: translateY(-50%); color: #666; font-size: 1rem; pointer-events: none;"></span>
      </div>
    </div>
    <div>
      <div style="position: relative;">
        <input
          type="number"
          id="boxes-output-{{ section.id }}"
          min="1"
          step="1"
          placeholder="Boxes Needed"
          style="width: 100%; padding: 10px 70px 10px 10px; border: 1px solid #ccc; border-radius: 4px; font-size: 1rem; -moz-appearance: textfield;"
        />
        <span id="boxes-unit-{{ section.id }}" style="position: absolute; right: 12px; top: 50%; transform: translateY(-50%); color: #666; font-size: 1rem; pointer-events: none;"></span>
      </div>
    </div>
  </div>
  <div style="margin-bottom: 16px;">
    <label style="display: flex; align-items: center; cursor: pointer;">
      <input
        type="checkbox"
        id="waste-checkbox-{{ section.id }}"
        style="width: 18px; height: 18px; margin-right: 8px; cursor: pointer;"
      />
      <span style="font-size: 0.95rem;">Add 10% more to cover cuts and waste (recommended)</span>
    </label>
  </div>
  <div style="margin-top: 16px; padding: 12px; background-color: #f5f5f5; border-radius: 4px;">
    <p style="margin: 0; font-size: 1rem;">
      <strong>Total Price:</strong>
      <span id="calculated-price-{{ section.id }}" style="font-size: 1.25rem; color: #2c5f2d; font-weight: bold;">$0.00</span>
    </p>
  </div>
</div>

<script>
(function() {
  const sectionId = '{{ section.id }}';
  const sqftInput = document.getElementById('sqft-input-' + sectionId);
  const boxesOutput = document.getElementById('boxes-output-' + sectionId);
  const sqftUnit = document.getElementById('sqft-unit-' + sectionId);
  const boxesUnit = document.getElementById('boxes-unit-' + sectionId);
  const wasteCheckbox = document.getElementById('waste-checkbox-' + sectionId);
  const priceDisplay = document.getElementById('calculated-price-' + sectionId);

  const SQFT_PER_BOX = 5.26; // 100 sqft = 19 boxes, so 100/19 = 5.26 sqft per box

  function getProductPrice() {
    // Try multiple selectors to find the price
    const selectors = [
      '.price__container .price-item--regular',
      '.price .money',
      '[data-product-price]',
      '.product__price .money'
    ];

    for (let selector of selectors) {
      const priceElement = document.querySelector(selector);
      if (priceElement) {
        const priceText = priceElement.textContent.trim();
        const price = parseFloat(priceText.replace(/[^0-9.]/g, ''));
        if (!isNaN(price) && price > 0) {
          return price;
        }
      }
    }

    // Fallback to variant price if available
    const variantPrice = {{ closest.product.selected_or_first_available_variant.price | divided_by: 100.0 }};
    return variantPrice;
  }

  let isUpdating = false;

  function updateUnits() {
    // Show "sq ft" only when there's a value
    if (sqftInput.value) {
      sqftUnit.textContent = 'sq ft';
    } else {
      sqftUnit.textContent = '';
    }

    // Show "boxes" only when there's a value
    if (boxesOutput.value && boxesOutput.value !== '0') {
      boxesUnit.textContent = 'boxes';
    } else {
      boxesUnit.textContent = '';
    }
  }

  function calculateFromSqft() {
    if (isUpdating) return;
    isUpdating = true;

    const sqft = parseFloat(sqftInput.value) || 0;
    let boxes = Math.ceil(sqft / SQFT_PER_BOX);

    if (sqft === 0) {
      boxesOutput.value = '';
      priceDisplay.textContent = '$0.00';
      updateUnits();
      isUpdating = false;
      return;
    }

    // Apply 10% waste if checked
    if (wasteCheckbox.checked) {
      boxes = Math.ceil(boxes * 1.1);
    }

    boxesOutput.value = boxes;

    const pricePerBox = getProductPrice();
    const totalPrice = boxes * pricePerBox;
    priceDisplay.textContent = '$' + totalPrice.toFixed(2);

    updateUnits();
    isUpdating = false;
  }

  function calculateFromBoxes() {
    if (isUpdating) return;
    isUpdating = true;

    let boxes = parseFloat(boxesOutput.value) || 0;

    if (boxes === 0) {
      sqftInput.value = '';
      priceDisplay.textContent = '$0.00';
      updateUnits();
      isUpdating = false;
      return;
    }

    // Reverse calculate: if waste is checked, the entered boxes include waste
    let actualBoxes = boxes;
    if (wasteCheckbox.checked) {
      actualBoxes = Math.floor(boxes / 1.1);
    }

    const sqft = Math.round(actualBoxes * SQFT_PER_BOX);
    sqftInput.value = sqft;

    const pricePerBox = getProductPrice();
    const totalPrice = boxes * pricePerBox;
    priceDisplay.textContent = '$' + totalPrice.toFixed(2);

    updateUnits();
    isUpdating = false;
  }

  if (sqftInput && boxesOutput && wasteCheckbox) {
    sqftInput.addEventListener('input', calculateFromSqft);
    sqftInput.addEventListener('focus', updateUnits);
    sqftInput.addEventListener('blur', updateUnits);
    boxesOutput.addEventListener('input', calculateFromBoxes);
    boxesOutput.addEventListener('focus', updateUnits);
    boxesOutput.addEventListener('blur', updateUnits);
    wasteCheckbox.addEventListener('change', calculateFromSqft);
    // Initialize
    setTimeout(() => { updateUnits(); }, 100);
  }
})();
</script>
